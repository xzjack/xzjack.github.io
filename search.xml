<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据库的主从复制]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%2F</url>
    <content type="text"><![CDATA[数据库的复制原理图步骤:当主库的数据发生变化时,会将更新的数据写入二进制日志文件中.从库中的IO线程会试试的监听主库的二进制日志文件.如果文件发生了变化,则获取主库二进制文件中更新的记录.之后写入从库的中继日志中.当中继日志中有数据时,从库会通过sql线程读取中继日志中的信息,之后将数据进行同步.当上述的操作完成后,主从同步完成,等待下一次同步.开始配置 GO!!!修改主库二进制文件配置vim /etc/my.cnf1234[mysqld]...server-id=1log-bin=mysql-bin之后重启：service mysql restartcd /usr/local/src/mysql/data 进入mysql安装目录查看（我这里是data文件夹）mysql服务重启一下就会多一个mysql-bin.00000x文件同理，编辑从库配置，设置server-id=2，其余操作一致实现数据库主从挂载检查主库状态切换到从库，执行挂载指令：1change master to master_host=&quot;192.168.198.134&quot;, master_port=3306, master_user=&quot;root&quot;, master_password=&quot;root&quot;, master_log_file=&quot;mysql-bin.000002&quot;, master_log_pos=120;开启主从服务：start slave;检查主从状态：show slave status \G # 在Navicat中\G不起作用这两个都是Yes，说明OK，如果不是那么可能是网络，用户名密码或者pos 的问题，网络只要能ping通应该就OK，pos是show master status的Position的值。这里我一开始配的时候，Slave_IO_Running是No，原因是mysql有个uuid，这是唯一标识，而我的从机是克隆过来的，导致了uuid一样了，所以只要修改一下uuid就行了（uuid在auto.cnf文件中），修改完了重启一下mysql服务主从同步搭建完成，可以测试一下拓展阅读：与MySQL传统复制相比，GTID有哪些独特的复制姿势?上文我们实现了一主一从的同步备份，当然也可以实现一主多从，或者级联复制一主多从的配置就不讲了，照着上文配就行了，级联复制自己Google这里我们还要考虑主库宕机了，怎么办？两种解决方案：双主模式假如原先是一主一从的配置，那么直接互为主从，实现双机热备假如原先是一主两从或者三从的配置，那么可以设计成双主双从架构设置好双主双从复制后：&emsp;&emsp;一个主出现问题，可以切换到另外的主进行写数据，新主同步数据给它的从；&emsp;&emsp;待问题旧主恢复服务后，新的主会同步数据给它，它再同步数据给自己的从，这样不会出现数据的不同步和服务的不可用。参考文章：https://www.cnblogs.com/liudongdong666666/p/7818240.html主从故障切换http://www.voidcn.com/article/p-supxiiit-rv.html好了，实现了主从同步备份接着需要做什么呢？我们是不是可以把从数据库利用起来，只是用来备份是不是太浪费了？这就有了读写分离，主数据库写，从数据库读，从数据库只能读不能写，不然数据不一致，或者主键冲突直接报错实现：用代理服务器分发请求，然后从数据库可能有多台，这就可以使用负载均衡Mycat中间件介绍Mycat使用（这里我们主要基于双机热备来进行读写分离的配置）上传文件，解压就行了编辑server.xml文件 「/usr/local/src/mycat/conf」1234567891011&lt;user name=&quot;root&quot;&gt; &lt;property name=&quot;password&quot;&gt;root&lt;/property&gt; &lt;!-- 与schema.xml中的配置相同 注意数据库的大小写 --&gt; &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;&lt;/user&gt;&lt;!-- 以下配置没用的吧，有上面的就够了 --&gt;&lt;user name=&quot;user&quot;&gt; &lt;property name=&quot;password&quot;&gt;user&lt;/property&gt; &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt; &lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;&lt;/user&gt;编辑schema.xml文件123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt; &lt;!--name属性是自定义的 dataNode表示数据库的节点信息--&gt; &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn1&quot;/&gt; &lt;!--定义节点名称/节点主机/数据名称--&gt; &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;dbname&quot; /&gt; &lt;!--参数介绍--&gt; &lt;!--balance=&quot;0&quot;表示所有的读操作都会发往writeHost主机，相当于不开启读写分离机制了 --&gt; &lt;!--balance=&quot;1&quot;表示全部的 readHost 与 stand by writeHost 参与 select 语句的负载均衡--&gt; &lt;!--balance=&quot;2&quot;表示所有读操作都随机的在 writeHost、readhost 上分发--&gt; &lt;!--balance=&quot;3&quot;，所有读请求随机的分发到 wiriterHost 对应的 readhost 执行，writerHost 不负担读压力，注意 balance=3 只在 1.4 及其以后版本有，1.3 没有--&gt; &lt;!--writeType=0 所有的写操作都发往第一个writeHost主机--&gt; &lt;!--writeType=1 所有的写操作随机发往writeHost中--&gt; &lt;!--dbType 表示数据库类型 mysql/oracle--&gt; &lt;!--dbDriver=&quot;native&quot; 固定参数 不变--&gt; &lt;!--switchType=-1 表示不自动切换, 主机宕机后不会自动切换从节点--&gt; &lt;!--switchType=1 表示会自动切换(默认值)如果第一个主节点宕机后,Mycat会进行3次心跳检测,如果3次都没有响应,则会自动切换到第二个主节点--&gt; &lt;!--并且会更新/conf/dnindex.properties文件的主节点信息 localhost1=0 表示第一个节点.该文件不要随意修改否则会出现大问题--&gt; &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot;&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!--配置第一台主机主要进行写库操作,在默认的条件下Mycat主要操作第一台主机在第一台主机中已经实现了读写分离.如果从节点比较忙,则主节点分担部分压力.--&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.198.134:3306&quot; user=&quot;root&quot; password=&quot;root&quot;&gt; &lt;!--读数据库，可以配置多个--&gt; &lt;readHost host=&quot;hostS1&quot; url=&quot;192.168.198.135:3306&quot; user=&quot;root&quot; password=&quot;root&quot; /&gt; &lt;/writeHost&gt; &lt;!--定义第二台主机 由于数据库内部已经实现了双机热备.--&gt; &lt;!--Mycat实现高可用.当第一个主机134宕机后.mycat会自动发出心跳检测.检测3次.--&gt; &lt;!--如果主机134没有给Mycat响应则判断主机死亡.则回启东第二台主机继续为用户提供服务.--&gt; &lt;!--如果134主机恢复之后则处于等待状态.如果135宕机则134再次持续为用户提供服务.--&gt; &lt;!--前提:实现双机热备.--&gt; &lt;writeHost host=&quot;hostM2&quot; url=&quot;192.168.198.135:3306&quot; user=&quot;root&quot; password=&quot;root&quot;&gt; &lt;readHost host=&quot;hostS1&quot; url=&quot;192.168.198.134:3306&quot; user=&quot;root&quot; password=&quot;root&quot; /&gt; &lt;/writeHost&gt; &lt;/dataHost&gt;&lt;/mycat:schema&gt;mycat启动测试12345./mycat &#123; console | start | stop | restart | status | dump &#125;./mycat console 打印控制台信息 start 启动mycat ...假如mycat报错了，可以去/usr/local/src/mycat/logs 目录下查看日志信息mycat默认端口号是8066，需要注意端口占用问题。以后数据库url连接mycat就可以了]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>主从复制</tag>
        <tag>读写分离</tag>
        <tag>双机热备</tag>
        <tag>Mycat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置Linux web环境]]></title>
    <url>%2F2019%2F03%2F12%2F%E9%85%8D%E7%BD%AELinux-web%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[Linux版本说明CentOS下载地址: https://www.centos.org/download/需要VPN，下载DVD版的就好了12[root@localhost ~]# cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core)配置JDK环境&emsp;&emsp;&emsp;在Xshell 6上通过Xftp 6将本地的jdk文件[jdk-8u131-linux-x64.tar.gz]上传到本地CentOS中[/usr/local/src/Java]1、解压到当前目录（当然也可以解压到指定目录 -C /xxx/xxx）123456[root@localhost Java]# pwd/usr/local/src/Java[root@localhost Java]# tar -xvf jdk-8u131-linux-x64.tar.gz ...[root@localhost Java]# lsjdk1.8.0_131 jdk-8u131-linux-x64.tar.gz2、配置环境变量vi /etc/profile添加如下内容export JAVA_HOME=/usr/local/src/Java/jdk1.8.0_131export PATH=$JAVA_HOME/bin:$PATH配置完后刷新source /etc/profile测试java -version配置Tomcat环境上传解压，当然tomcat目录需要提前创建好tar -xvf apache-tomcat-8.5.16.tar.gz -C tomcat/然后可以进入解压的tomcat目录下的bin目录，查看版本信息./version.sh配置MySQL环境去MySQL官网下载：https://dev.mysql.com/downloads/mysql/展示在首页的是最新版的，本文以5.6版本的安装为例子操作系统选择：Linux - Generic 通用版，然后选择64位的上传解压（上传的目录最好是/usr/local本地软件目录）tar -xvf mysql-5.6.44-linux-glibc2.12-x86_64.tar.gz删除压缩包，并重命名解压后的文件夹12[root@localhost src]# rm -f mysql-5.6.44-linux-glibc2.12-x86_64.tar.gz [root@localhost src]# mv mysql-5.6.44-linux-glibc2.12-x86_64/ mysql创建mysql用户组及用户可以先检查一下是否有mysql用户组及用户1234567[root@localhost src]# groups mysqlgroups: mysql: no such user[root@localhost src]# groupadd mysql[root@localhost src]# useradd -r -g mysql mysql[root@localhost src]# groups mysqlmysql : mysql安装数据库进入mysql安装目录：cd mysql/修改目录拥有者为mysql用户：chown -R mysql:mysql ./安装数据库：./scripts/mysql_install_db –user=mysql提示：-bash: ./scripts/mysql_install_db: /usr/bin/perl: 坏的解释器: 没有那个文件或目录解决办法（安装perl跟perl-devel即可）: 执行 yum -y install perl perl-devel然后再次执行，又报错FATAL ERROR: please install the following Perl modules before executing ./scripts/mysql_install_db: Data::Dumper解决办法（安装autoconf库）：执行 yum -y install autoconf再次执行，终于OK了！！！修改当前目录拥有者为root用户：chown -R root:root ./修改当前data目录拥有者为mysql用户：chown -R mysql:mysql data启动mysql服务并添加开机启动添加开机启动：执行命令cp support-files/mysql.server /etc/init.d/mysql，把启动脚本放到开机初始化目录启动mysql服务：执行命令service mysql start报错了…123/etc/init.d/mysql: line 244: my_print_defaults: command not found/etc/init.d/mysql: line 264: cd: /usr/local/mysql: No such file or directoryStarting MySQL ERROR! Couldn&apos;t find MySQL server (/usr/local/mysql/bin/mysqld_safe)解决方法：find / -name mysql 删除有关mysql的东西 并且删除/etc/my.cnf*，接着再按流程走一遍[第一次我是安装在/usr/local/src目录下的，这次安装在/usr/local目录下]找到真正原因了！！！启动mysql服务找不到/usr/local/mysql目录的错误，原因是在mysql/support-files/mysql.server中，有如下代码：1234567891011121314151617181920mysqld_pid_file_path=if test -z &quot;$basedir&quot;then basedir=/usr/local/mysql bindir=/usr/local/mysql/bin if test -z &quot;$datadir&quot; then datadir=/usr/local/mysql/data fi sbindir=/usr/local/mysql/bin libexecdir=/usr/local/mysql/binelse bindir=&quot;$basedir/bin&quot; if test -z &quot;$datadir&quot; then datadir=&quot;$basedir/data&quot; fi sbindir=&quot;$basedir/sbin&quot; libexecdir=&quot;$basedir/libexec&quot;fi可以看到，/usr/local/mysql目录是它的默认安装目录此时，我们不可以更改这里的代码，我们可以将/usr/local/mysql链接到/usr/local/src/mysql，具体做法如下：步骤一：创建/etc/my.cnf文件，里面包含basedir目录设定123456789cd /usr/local/src/mysql/support-filescp my-medium.cnf my.cnfcd /etcln -s /usr/local/src/mysql/support-files/my.cnfvi my.cnf[mysqld]......basedir=/usr/local/src/mysql步骤二：将mysql目录下的bin/my_print_defaults链接到/usr/bin目录下12cd /usr/binln -s /usr/local/src/mysql/bin/my_print_defaults参考链接：https://blog.51cto.com/13687553/2156898修改mysql的root密码在安装目录下：./bin/mysqladmin -u root password ‘密码’把mysql客户端放到默认路径ln -s /usr/local/src/mysql/bin/mysql /usr/local/bin/mysqlmysql -uroot -p测试这么看来，通过rpm的方式安装，要轻松的多啊]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>JDK</tag>
        <tag>Tomcat</tag>
        <tag>MySQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将博客本地文件上传至GitHub]]></title>
    <url>%2F2019%2F03%2F04%2F%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%87%B3GitHub%2F</url>
    <content type="text"><![CDATA[我们知道hexo是一个生成静态网页的博客框架，从_config.yml中可以看到我们hexo d操作是将我们的静态文件推送到远程master分支上1234deploy: type: git repo: git@github.com:xzjack/xzjack.github.io.git branch: master那么假如有一天，我们的电脑坏了或者不在身边，那我们要怎么写博客呢？重新配置环境？显然不可能所以我们可以将我们的本地源文件利用Git推送到GitHub上进行版本控制在xzjack.github.io仓库中创建一个分支code:然后只要执行 git init / git add . / git commit -m “description” 即可创建本地仓库关联远程仓库git remote add origin git@github.com:xzjack/xzjack.github.io.git之后就可以git push origin master:code将本地的配置文件（源文件）推送到远程code分支上了对比本地文件，我们发现有几个文件夹被忽略了这些被忽略的文件其实在.gitignore文件中有声明，node_modules文件夹可以通过npm install生成，public与db.json可以通过hexo g生成但是！！！但是！！！我们发现theme/next文件夹中竟然没有内容，这是怎么回事呢？原来是next主题文件也是一个git仓库，一个git仓库中不能包含另一个git仓库，否则提交主题文件会失败，所以我么需要将next文件夹中.git*开头的文件统统删除，然后再次push至此，我们已经实现了源文件的版本控制备份以后换电脑的时候，只需要安装Node.js与Git就好了，然后执行$ git clone -b code git@github.com:xzjack/test.git 文件名，然后再执行npm install生成node_modules目录完！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git基本命令]]></title>
    <url>%2F2019%2F02%2F28%2FGit%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[安装Linux&emsp;Redhat系列：$ sudo yum install git&emsp;Debian系列：$ sudo apt-get install gitWindowshttps://git-scm.com/download/win安装完后右键就能使用Git Bash了，可以git version查看版本用户信息配置12$ git config --global user.name &quot;xzjack&quot; $ git config --global user.email zjie1one@gmail.com使用初始化一个Git仓库$ git init添加文件到暂存区$ git add &lt;file&gt;添加到版本库$ git commit -m &quot;description&quot;查看工作区状态$ git status查看修改后的差异12$ git diff # 不加参数即默认比较工作区与暂存区$ git diff &lt;branch1&gt; # 在master分支下执行，就代表比较master分支与branch1分支的差异详见：https://www.cnblogs.com/qianqiannian/p/6010219.html查看提交日志$ git log丢弃工作区的修改$ git checkout -- &lt;file&gt;丢弃暂存区的修改12345分两步：第一步：把暂存区的修改撤销，重新放回工作区$ git reset HEAD &lt;file&gt;第二步：撤销工作区的修改$ git checkout -- &lt;file&gt;版本回退：假如已经提交到版本库了，但是没提交到远程库$ git reset --hard HEAD^以上命令是返回上一个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本是HEAD^^，往上100个版本写成HEAD~100。回退指定版本号：$ git reset --hard commit_id删除文件$ git rm &lt;file&gt;相当于执行12$ rm &lt;file&gt;$ git add &lt;file&gt;删除恢复123456789Q：比如执行了rm text.txt 误删了怎么恢复？A：执行git checkout -- text.txt 把版本库的东西重新写回工作区就行了Q：如果执行了git rm text.txt我们会发现工作区的text.txt也删除了，怎么恢复？A：先撤销暂存区修改，重新放回工作区，然后再从版本库写回到工作区1. $ git reset head text.txt2. $ git checkout -- text.txtQ：假如执行git commit -m &quot;delete text.txt&quot; 删除且提交了，怎么办？A：版本回退吧！远程仓库创建SSH Key如何搭建个人博客？这篇文章里有讲提交到远程仓库$ git push origin master # 可以把 master 换成你想要推送的任何分支此时，如果你的仓库不是clone下来的（clone下来的直接关联远程仓库），并且没有配置远程仓库，那么是不行的查看已配置的远程服务器 git remote / git remote -v 都没有相应的输出所以需要关联远程仓库12345$ git remote add origin &lt;server&gt;假如一不小心关联了错误的远程仓库，那么也能删除$ git remote rm origin删除后再次添加就好了当然喽，没有关联远程仓库也可以这么提交，但是谁会这么麻烦去做呢？git push git@github.com:xzjack/test.git注意：所有对远程仓库的操作，都需要先在远程仓库建好仓库，取到仓库地址克隆1234$ git clone git@github.com:xzjack/test.git 文件名 # 默认以远程库名命名，也可以自己指定//如果想克隆分支$ git clone -b 分支名 git@github.com:xzjack/test.git 文件名分支创建分支$ git branch &lt;branch name&gt;切换分支$ git checkout &lt;branch name&gt;创建+切换分支$ git checkout -b &lt;branch name&gt;查看分支$ git branch删除分支12$ git branch -d &lt;branch name&gt; #删除本地$ git push origin --delete &lt;branch name&gt; #删除远端分支重命名分支$ git branch -m newname分支合并创建分支（branch1）后，我们可以在分支上为所欲为，并不会影响到master分支在分支上开发完成后，git commit -m “message”提交然后切换回master分支查看内容，发现开发的东西都不见了，因为那个提交是在分支上，而master分支此刻的提交点并没有变现在将branch1分支的工作成果合并到master分支上$ git merge branch1合并完后可以选择删除branch1分支，这和直接在master分支上工作效果是一样的，但过程更安全。分支更新$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;本地仓库至最新改动，git pull相当于在你的工作目录中 获取（fetch） 并合并（merge） 远端的改动一般会提示你这样：12345678910$ git pullThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for details. git pull &lt;remote&gt; &lt;branch&gt;If you wish to set tracking information for this branch you can do so with: git branch --set-upstream-to=origin/&lt;branch&gt; master这就是说你本地分支和远程分支没有建立关联那就按照提示建立关联$ git branch --set-upstream-to=origin/master或者这样也行$ git pull origin master # 远程分支master与当前分支合并本地分支提交到远程分支开分支两种方式：1.远程先开好分支然后拉到本地$ git checkout -b feature-branch origin/feature-branch //检出远程的feature-branch分支到本地2.本地先开好分支然后推送到远程12$ git checkout -b feature-branch //创建并切换到分支feature-branch $ git push origin feature-branch:feature-branch //推送本地的feature-branch分支到远程origin的feature-branch分支(没有会自动创建)假如在远程创建了分支，本地通过git checkout -b &lt;branch name&gt;创建并切换分支那么首先需要先关联$ git remote add origin git@github.com:xzjack/xxx.git然后将分支上传到远程分支$ git push origin feature-branch此时可能有冲突那么一种方法就是(不提倡，应该与冲突文件修改者商讨)$ git push -f origin feature-branch # 本地强制上传到远程，把远程的覆盖未完待续 。。。]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DPlayer]]></title>
    <url>%2F2019%2F02%2F19%2FDplayer%2F</url>
    <content type="text"><![CDATA[Hexo插入视频的方式—-&gt;可以在各大视频网站，分享外链的方式插入文章也可以使用H5视频播放器DPlayer安装hexo插件npm install hexo-tag-dplayer --save使用1&#123;% dplayer "url=视频地址.mp4" "pic=缩略图.jpg" "loop=yes" "theme=#FADFA3" "autoplay=false" "token=tokendemo" %&#125;插件使用指南：https://github.com/MoePlayer/hexo-tag-dplayer因视频文件比较大，故将其存储于catbox，之前打算将视频文件放到七牛云上，但是视频这种东西流量是在太大了，免费的10G流量很快就会耗光，所以选择了catbox(其实还挺好用的🙃)!function(){var e=new DPlayer({container:document.getElementById("dplayer0"),theme:"#FADFA3",loop:!0,video:{url:"https://files.catbox.moe/8bni2p.mp4"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)}()]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>DPlayer</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何搭建个人博客？]]></title>
    <url>%2F2018%2F11%2F14%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[答：利用 GitHub Pages + Hexo 搭建博客前期准备准备环境与工具：Node.js、npm、Git、GitHub账号、域名我的环境OS: win10Node.js: v10.15.3npm: 6.4.1Git: 2.7.2.windows.11、安装Node.js的时候选择 Add to Path 安装全部组件npm是Node.js的包管理工具，在安装Node.js的时候顺带装好了安装完成后可以通过如下方法测试：2、创建仓库这样就能通过 http://xzjack.github.io 来访问了3、绑定域名先去注册域名的云服务商那将域名解析，然后去GitHub Pages填写你的域名4、配置ssh key为何要配置 SSH Key ？利用 Git 从远程仓库 clone 代码的方式有两种，一种是 Https ，另一种是 SSH 。如果使用 Https 方式，不需要任何配置，但是当你 clone 下来后会发现，每次 pull, push 都要输入密码，相当的烦。这样就极大的影响了我们的工作效率。这时候就需要使用 SSH 方式了，使用这种方式就不再需要每次都输入密码这么麻烦了，但是需要配置 SSH Key ，配置方法请看下面。打开终端，输入以下命令：$ cd ~/.ssh如果提示：No such file or directory 说明你还没有配置过ssh key$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到 .ssh\id_rsa.pub 文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：测试是否成功：$ ssh -T git@github.com此时会提示 Are you sure you want to continue connecting (yes/no)? 输入yes过一会儿看到 Hi xzjack! You’ve successfully authenticated, but GitHub does not provide shell access. 就说明SSH配置成功了还需要配置如下，这样每次Git提交时，会说明是谁提交了更新12$ git config --global user.name &quot;xzjack&quot; // 你的github用户名，非昵称$ git config --global user.email &quot;xxx@example.com&quot; // 填写你的github注册邮箱使用Hexo写博客Hexo介绍Hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在GitHub上，采用插件驱动，可扩展性高GitHub Pages支持静态页面的解析，而Hexo可以依据配置便捷的生成一套定制式的静态页面，两者一搭配就能开发博客了安装前注意事项:１．很多命令可以在cmd下完成，也可以使用git bash来完成，这里统一全部用git bash来执行２．hexo中有两份主要的配置文件，名称都是_config.yml，其中一份位于根目录下，包含Hexo本身配置，一份位于主题目录（themes/xxx）下，由主题作者提供，我们将前者称为站点配置文件，后者称为主题配置文件３．使用npm安装比较慢，可以更换npm源使用淘宝npm镜像：npm config set registry https://registry.npm.taobao.org查看：npm config get registry安装通过npm安装hexo$ npm install -g hexo -cli接着在电脑创建一个Blog文件夹（名字任取），我的是在 D:\Blog ，此文件夹将用来存放博客的全部内容12$ cd d:/Blog$ hexo init然后hexo s开启本地预览，浏览器访问 http://localhost:4000 即可看到效果Hexo常用命令123456789hexo n &quot;文章名称&quot; #新建文章，被放在\source\_posts目录下hexo n page &quot;页面名称&quot; #新建页面hexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo g #生成静态页面至public目录hexo s #开启预览访问 http://localhost:4000 如果访问失败，可能是端口被占用hexo d #部署到GitHubhexo g -d #生成并上传修改主题默认的主题不好看，我目前使用的这个主题是NexT，是当前GitHub上star最多的主题，也是个人比较喜欢的主题1. 安装：$ git clone https://github.com/iissnan/hexo-theme-next themes/next //这是5.*版本的安装方式2. 去站点配置文件设置主题theme: next3. 测试123hexo clean //修改主题往往需要先clean一下，否则不生效hexo s访问http://localhost:40004. 将hexo博客部署到GitHub需要安装hexo-deployer-git插件，然后在站点配置文件中配置$ npm install hexo-deployer-git --save1234deploy: type: git repo: git@github.com:xzjack/xzjack.github.io.git branch: master执行部署指令hexo g -d完成部署后，可以访问域名测试，如果没有绑定域名则访问 https://xzjack.github.io注意: 假如你用域名访问获取不到页面，而用xxx.github.io访问能获取到页面，那么应该就是执行 hexo d 的时候，把你GitHub Pages中绑定的域名清除了怎么办?在你博客的根目录下的source文件夹中创建文件CNAME（无后缀），添加你的域名enum.top然后在站点配置文件_config.yml中配置如下123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://enum.toproot: /permalink: :year/:month/:day/:title/permalink_defaults:5. 菜单栏配置我们刚开始默认的菜单只有首页和归档两个，不能够满足我们的要求，所以需要添加菜单，打开 主题配置文件 找到 menu123456789menu: home: / || home tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive about: /about/ || user #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat需要哪个菜单就把哪个取消注释就行了如果事先没有通过 hexo n page &quot;pageName&quot; 来创建页面的话，即使在配置文件中取消注释，页面也没法显示举个栗子:创建分类页面hexo new page categories给分类页面添加类型type，找到source/categories文件夹中的index.md文件，打开加上type属性12345---title: 分类date: 2018-11-13 23:40:39type: &quot;categories&quot;---这样我们创建的新文章都会自带categories这个属性，我们只需往里填分类，就能自动形成分类了12345678---title: 搭建个人博客date: 2018-11-14 17:23:10categories: hexotags: - hexo - blog---其他菜单比如标签tags，也是类似的做法…6. NexT主题样式设置12345# Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini提供了四种样式，选择自己喜欢的7. 其他主题插件与配置其他的还有设置头像啊，添加搜索功能啊，添加评论系统啊等等等等这里只是简单的讲一下如何搭建博客，那些各种各样的插件与配置自己上网搜去吧一些注意事项在我们配置过程中，一定要仔细，可能一个空格或者一个符号就能使整个博客访问不了在用markdown编辑时，插入本地图片会把图片上传到 https://imgur.com/ 图床，然后提供访问的链接，这样做确实省事，可是万一图床关闭了或是怎么样了，那么博客中的图片就失效了。针对这个问题我们可以这么做：1. 在站点配置文件_config.yml中post_asset_folder:这个选项设为true2. 在根目录下执行命令npm install hexo-asset-image --save，这是安装一个可以上传本地图片的插件3. 成功后，通过hexo n &quot;xxx&quot;来创建文章时，/source/_posts文件夹内除了xxx.md文件还有一个同名的文件夹4. 我们只要把在xxx.md中需要用到的图片放到同名文件夹中，然后通过![](xxx/picture.png)即可插入图片，部署博客到GitHub时，也会把图片上传2019/2/21 下午 10:10:30 更新: 目前暂时将图片全部移到七牛云上了(10G存储空间，10G流量/月)，而且七牛云还提供免费的CDN加速服务(这是我选择七牛云的主要原因)，其他的一些公共免费图床是没有这个快的如果有一天博客中的图片不能访问了，那么很有可能是欠费了🙄，所以一些重要的图片也需要在本地备份一下类似的还有阿里云OSS，腾讯云COS，又拍云等等2019/2/25: 好吧，我又把图片放到本地了，原因有二，一是七牛云免费的流量只支持http，这样因为不是全站https都没有🔒的图标了；二是我用着免费的融合CDN测试域名，一个月后就过期了，需要重新迁移到新的域名，这样就得更改所有的图片外链地址，不方便。所以干脆就放本地算了，又不用担心像图床那样挂了也不用担心放在七牛云上超量欠费了，速度慢点就慢点。有时候我们hexo g -d提交更改的时候，提示 Could not read from remote repository. 可能的原因是服务器的防火墙限定，或者配置文件限定ip登录，比如你用了VPN在代码块中不能正常使用&lt;&gt;，经过排查发现，是因为安装了hexo-lazyload-image插件的原因，所以有些插件不能随便安装，会带来一些未知的问题在代码块外，Markdown为了兼容HTML，将尖括号都认为是HTML的语法来处理了，所以碰到&lt;hello&gt;形式的都会翻译成&lt;hello&gt;&lt;/hello&gt;，中文的话可以正常显示&lt;中文&gt;，为了解决这个问题，可以用转义字符来代替尖括号，左尖括号&amp;lt;右尖括号&amp;gt; 如：&amp;lt;display&amp;gt;翻译成&lt;display&gt;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[First Blog]]></title>
    <url>%2F2018%2F11%2F05%2FFirst-Blog%2F</url>
    <content type="text"><![CDATA[你没有如期归来而这正是离别的意义]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
</search>
